=========
Reference
=========

.. WARNING This file is generated by conf.py. Manual changes will be lost.

.. module:: General

  Some doc for General

  .. module:: Pervasives

    Some doc for Pervasives

    The module overrides all elements from the standard
    `pervasives <https://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html>`_ with unusable but guiding values:

    .. val:: raise
        type: [ `Please_use_General__Exception__raise ]

    It then brings back a small set of ubiquitous values:

    .. val:: not
        type: bool -> bool

      Boolean negation. Alias of :val:`General.Bool.not`.

    .. val:: (&&)
        type: bool -> bool -> bool

    .. val:: (||)
        type: bool -> bool -> bool

    .. val:: xor
        type: bool -> bool -> bool

    .. val:: (~-.)
        type: float -> float

    .. val:: (~+.)
        type: float -> float

    .. val:: (+.)
        type: float -> float -> float

    .. val:: (-.)
        type: float -> float -> float

    .. val:: (*.)
        type: float -> float -> float

    .. val:: (/.)
        type: float -> float -> float

    .. val:: (**)
        type: float -> float -> float

    .. val:: (@@)
        type: ('a -> 'b) -> 'a -> 'b

    .. val:: (|>)
        type: 'a -> ('a -> 'b) -> 'b

    .. val:: (%)
        type: ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b

    .. val:: (~-)
        type: int -> int

    .. val:: (~+)
        type: int -> int

    .. val:: (+)
        type: int -> int -> int

    .. val:: (-)
        type: int -> int -> int

    .. val:: (*)
        type: int -> int -> int

    .. val:: (/)
        type: int -> int -> int

    .. val:: (mod)
        type: int -> int -> int

    .. val:: (@)
        type: 'a list -> 'a list -> 'a list

    .. val:: (^)
        type: string -> string -> string

    .. val:: ref
        type: 'a -> 'a OCamlStandard.Pervasives.ref

    .. val:: (:=)
        type: 'a OCamlStandard.Pervasives.ref -> 'a -> unit

    .. val:: (!)
        type: 'a OCamlStandard.Pervasives.ref -> 'a

    .. val:: (=)
        type: 'a -> 'a -> bool

    .. val:: (<>)
        type: 'a -> 'a -> bool

    .. val:: (<)
        type: 'a -> 'a -> bool

    .. val:: (<=)
        type: 'a -> 'a -> bool

    .. val:: (>=)
        type: 'a -> 'a -> bool

    .. val:: (>)
        type: 'a -> 'a -> bool

    .. val:: ignore
        type: 'a -> unit

    .. val:: identity
        type: 'a -> 'a

  .. module:: Shorten

    .. type:: t

  .. module:: Traits

  .. module:: Concepts

  .. module:: Compare

    .. type:: t

    .. module:: Poly

  .. module:: Equate

    .. module:: Poly

    .. module:: Physical

  .. module:: CallStack

    .. type:: t

    .. val:: current
        type: ?max_size:int -> unit -> t

    .. module:: Location

      .. type:: t

    .. module:: Frame

      .. type:: t

      .. val:: is_raise
          type: t -> bool

      .. val:: location
          type: t -> Location.t option

      .. val:: format
          type: int -> t -> string option

    .. val:: frames
        type: t -> Frame.t list

  .. module:: Exception

    .. type:: t

    .. val:: register_printer
        type: (t -> string option) -> unit

    .. val:: record_backtraces
        type: bool -> unit

    .. val:: recording_backtraces
        type: unit -> bool

    .. val:: most_recent_backtrace
        type: unit -> CallStack.t option

    .. val:: raise
        type: t -> 'a

    .. val:: raise_without_backtrace
        type: t -> 'a

    .. val:: invalid_argument
        type: ('a, unit, string, string, string, 'b) CamlinternalFormatBasics.format6 -> 'a

    .. val:: failure
        type: ('a, unit, string, string, string, 'b) CamlinternalFormatBasics.format6 -> 'a

    .. val:: name
        type: exn -> string

    .. val:: or_none
        type: 'a lazy_t -> 'a option

  .. module:: Exit

    .. type:: t

    .. val:: of_int
        type: int -> t

    .. val:: exit
        type: t -> unit

    .. val:: at_exit
        type: (unit -> unit) -> unit

  .. module:: Function1

    .. type:: t

    .. val:: identity
        type: ('a, 'a) t

    .. val:: apply
        type: ('a, 'z) t -> 'a -> 'z

    .. val:: rev_apply
        type: 'a -> ('a, 'z) t -> 'z

    .. val:: compose
        type: ('a, 'b) t -> ('c, 'a) t -> ('c, 'b) t

    .. module:: O

      .. val:: (@@)
          type: ('a, 'z) t -> 'a -> 'z

      .. val:: (|>)
          type: 'a -> ('a, 'z) t -> 'z

      .. val:: (%)
          type: ('a, 'b) t -> ('c, 'a) t -> ('c, 'b) t

  .. module:: Function2

    .. type:: t

    .. val:: flip
        type: ('a, 'b, 'z) t -> ('b, 'a, 'z) t

    .. val:: curry
        type: ('a * 'b, 'z) Function1.t -> ('a, 'b, 'z) t

    .. val:: uncurry
        type: ('a, 'b, 'z) t -> ('a * 'b, 'z) Function1.t

  .. module:: Function3

    .. type:: t

    .. val:: flip
        type: ('a, 'b, 'c, 'z) t -> ('c, 'b, 'a, 'z) t

    .. val:: curry
        type: ('a * 'b * 'c, 'z) Function1.t -> ('a, 'b, 'c, 'z) t

    .. val:: uncurry
        type: ('a, 'b, 'c, 'z) t -> ('a * 'b * 'c, 'z) Function1.t

  .. module:: Function4

    .. type:: t

    .. val:: flip
        type: ('a, 'b, 'c, 'd, 'z) t -> ('d, 'c, 'b, 'a, 'z) t

    .. val:: curry
        type: ('a * 'b * 'c * 'd, 'z) Function1.t -> ('a, 'b, 'c, 'd, 'z) t

    .. val:: uncurry
        type: ('a, 'b, 'c, 'd, 'z) t -> ('a * 'b * 'c * 'd, 'z) Function1.t

  .. module:: Function5

    .. type:: t

    .. val:: flip
        type: ('a, 'b, 'c, 'd, 'e, 'z) t -> ('e, 'd, 'c, 'b, 'a, 'z) t

    .. val:: curry
        type: ('a * 'b * 'c * 'd * 'e, 'z) Function1.t -> ('a, 'b, 'c, 'd, 'e, 'z) t

    .. val:: uncurry
        type: ('a, 'b, 'c, 'd, 'e, 'z) t -> ('a * 'b * 'c * 'd * 'e, 'z) Function1.t

  .. module:: Unit

    .. type:: t

    .. val:: ignore
        type: 'a -> t

  .. module:: Bool

    .. type:: t

    .. module:: O

      .. val:: not
          type: t -> t

      .. val:: (&&)
          type: t -> t -> t

      .. val:: (||)
          type: t -> t -> t

      .. val:: xor
          type: t -> t -> t

    .. val:: not
        type: t -> t

    .. val:: and_
        type: t -> t -> t

    .. val:: or_
        type: t -> t -> t

    .. val:: xor
        type: t -> t -> t

  .. module:: Char

    .. type:: t

    .. val:: of_int
        type: int -> t

    .. val:: to_int
        type: t -> int

  .. module:: Int

    .. type:: t

    .. val:: smallest
        type: t

    .. val:: greatest
        type: t

    .. module:: Bitwise

      .. val:: logical_and
          type: t -> t -> t

      .. val:: logical_or
          type: t -> t -> t

      .. val:: logical_xor
          type: t -> t -> t

      .. val:: logical_not
          type: t -> t

      .. val:: logical_shift_left
          type: t -> shift:t -> t

      .. val:: logical_shift_right
          type: t -> shift:t -> t

      .. val:: arithmetic_shift_right
          type: t -> shift:t -> t

  .. module:: Int32

    .. type:: t

    .. val:: smallest
        type: t

    .. val:: greatest
        type: t

  .. module:: Int64

    .. type:: t

    .. val:: smallest
        type: t

    .. val:: greatest
        type: t

  .. module:: NativeInt

    .. type:: t

    .. val:: smallest
        type: t

    .. val:: greatest
        type: t

  .. module:: BigInt

    .. type:: t

  .. module:: Float

    .. type:: t

    .. val:: epsilon
        type: t

    .. val:: smallest
        type: t

    .. val:: greatest
        type: t

    .. val:: infinity
        type: t

    .. val:: negative_infinity
        type: t

    .. val:: not_a_number
        type: t

    .. val:: pi
        type: float

    .. val:: e
        type: float

    .. val:: of_parts
        type: significand:float -> exponent:int -> t

    .. val:: to_parts
        type: t -> float * int

    .. val:: to_fractional_and_integral
        type: t -> float * float

    .. val:: sqrt
        type: float -> float

    .. val:: exp
        type: float -> float

    .. val:: log
        type: float -> float

    .. val:: log10
        type: float -> float

    .. val:: expm1
        type: float -> float

    .. val:: log1p
        type: float -> float

    .. val:: cos
        type: float -> float

    .. val:: sin
        type: float -> float

    .. val:: tan
        type: float -> float

    .. val:: acos
        type: float -> float

    .. val:: asin
        type: float -> float

    .. val:: atan
        type: float -> float

    .. val:: atan2
        type: y:float -> x:float -> float

    .. val:: hypot
        type: float -> float -> float

    .. val:: cosh
        type: float -> float

    .. val:: sinh
        type: float -> float

    .. val:: tanh
        type: float -> float

    .. val:: ceil
        type: float -> float

    .. val:: floor
        type: float -> float

    .. val:: copy_sign
        type: t -> sign:t -> t

    .. module:: Class

      .. type:: t

      .. val:: of_float
          type: float -> t

  .. module:: String

    .. type:: t

    .. val:: get
        type: t -> int -> char

    .. module:: O

      .. val:: (^)
          type: t -> t -> t

    .. val:: concat
        type: t -> t -> t

    .. val:: substring
        type: t -> pos:int -> len:int -> t

    .. val:: prefix
        type: t -> len:int -> t

    .. val:: suffix
        type: t -> len:int -> t

    .. val:: has_prefix
        type: t -> pre:t -> bool

    .. val:: try_drop_prefix
        type: t -> pre:t -> t option

    .. val:: drop_prefix
        type: t -> pre:t -> t

    .. val:: has_suffix
        type: t -> suf:t -> bool

    .. val:: try_drop_suffix
        type: t -> suf:t -> t option

    .. val:: drop_suffix
        type: t -> suf:t -> t

    .. val:: split
        type: t -> sep:t -> t list

  .. module:: Option

    .. type:: t

    .. val:: some_if
        type: bool -> 'a lazy_t -> 'a t

    .. val:: some_if'
        type: bool -> 'a -> 'a t

    .. val:: is_some
        type: 'a t -> bool

    .. val:: is_none
        type: 'a t -> bool

    .. val:: value_def
        type: 'a t -> def:'a -> 'a

    .. val:: value
        type: ?exc:exn -> 'a t -> 'a

    .. val:: or_failure
        type: ('a, unit, string, string, string, 'b t -> 'b) CamlinternalFormatBasics.format6 -> 'a

    .. val:: map
        type: 'a t -> f:('a -> 'b) -> 'b t

    .. val:: iter
        type: 'a t -> f:('a -> unit) -> unit

    .. val:: filter
        type: 'a t -> f:('a -> bool) -> 'a t

    .. val:: filter_map
        type: 'a t -> f:('a -> 'b option) -> 'b t

    .. val:: value_map
        type: 'a t -> def:'b -> f:('a -> 'b) -> 'b

    .. module:: Specialize

  .. module:: Lazy

    .. type:: t

    .. val:: is_value
        type: 'a t -> bool

    .. val:: value
        type: 'a t -> 'a

    .. val:: map
        type: 'a t -> f:('a -> 'b) -> 'b t

  .. module:: Reference

    .. type:: t

    .. val:: of_contents
        type: 'a -> 'a t

    .. val:: contents
        type: 'a t -> 'a

    .. val:: assign
        type: 'a t -> 'a -> unit

    .. module:: O

      .. val:: ref
          type: 'a -> 'a t

      .. val:: (!)
          type: 'a t -> 'a

      .. val:: (:=)
          type: 'a t -> 'a -> unit

    .. module:: SpecializeOperators

    .. module:: Specialize

    .. module:: SpecializePredSucc

    .. module:: SpecializeRingoidOperators

    .. module:: SpecializeRingoid

  .. module:: Tuple2

    .. type:: t

    .. val:: make
        type: 'a -> 'b -> ('a, 'b) t

    .. val:: get_0
        type: ('a, 'b) t -> 'a

    .. val:: get_1
        type: ('a, 'b) t -> 'b

    .. val:: flip
        type: ('a, 'b) t -> ('b, 'a) t

  .. module:: Tuple3

    .. type:: t

    .. val:: make
        type: 'a -> 'b -> 'c -> ('a, 'b, 'c) t

    .. val:: get_0
        type: ('a, 'b, 'c) t -> 'a

    .. val:: get_1
        type: ('a, 'b, 'c) t -> 'b

    .. val:: get_2
        type: ('a, 'b, 'c) t -> 'c

    .. val:: flip
        type: ('a, 'b, 'c) t -> ('c, 'b, 'a) t

  .. module:: Tuple4

    .. type:: t

    .. val:: make
        type: 'a -> 'b -> 'c -> 'd -> ('a, 'b, 'c, 'd) t

    .. val:: get_0
        type: ('a, 'b, 'c, 'd) t -> 'a

    .. val:: get_1
        type: ('a, 'b, 'c, 'd) t -> 'b

    .. val:: get_2
        type: ('a, 'b, 'c, 'd) t -> 'c

    .. val:: get_3
        type: ('a, 'b, 'c, 'd) t -> 'd

    .. val:: flip
        type: ('a, 'b, 'c, 'd) t -> ('d, 'c, 'b, 'a) t

  .. module:: Tuple5

    .. type:: t

    .. val:: make
        type: 'a -> 'b -> 'c -> 'd -> 'e -> ('a, 'b, 'c, 'd, 'e) t

    .. val:: get_0
        type: ('a, 'b, 'c, 'd, 'e) t -> 'a

    .. val:: get_1
        type: ('a, 'b, 'c, 'd, 'e) t -> 'b

    .. val:: get_2
        type: ('a, 'b, 'c, 'd, 'e) t -> 'c

    .. val:: get_3
        type: ('a, 'b, 'c, 'd, 'e) t -> 'd

    .. val:: get_4
        type: ('a, 'b, 'c, 'd, 'e) t -> 'e

    .. val:: flip
        type: ('a, 'b, 'c, 'd, 'e) t -> ('e, 'd, 'c, 'b, 'a) t

  .. module:: IntOption

  .. module:: FloatOption

  .. module:: StringOption

  .. module:: IntReference

    .. type:: t

    .. module:: O

  .. module:: FloatReference

    .. type:: t

    .. module:: O

  .. module:: StringReference

    .. type:: t

    .. module:: O

      .. val:: (=^)
          type: t -> string -> unit

  .. module:: List

    .. type:: t

    .. module:: O

      .. val:: (@)
          type: 'a t -> 'a t -> 'a t

    .. val:: empty
        type: 'a t

    .. val:: singleton
        type: 'a -> 'a t

    .. val:: of_list
        type: 'a list -> 'a t

    .. val:: to_list
        type: 'a t -> 'a list

    .. val:: of_array
        type: 'a array -> 'a t

    .. val:: to_array
        type: 'a t -> 'a array

    .. val:: size
        type: 'a t -> int

    .. val:: is_empty
        type: 'a t -> bool

    .. val:: head
        type: 'a t -> 'a

    .. val:: tail
        type: 'a t -> 'a t

    .. val:: try_head
        type: 'a t -> 'a option

    .. val:: try_tail
        type: 'a t -> 'a t option

    .. val:: contains
        type: 'a t -> 'a -> equal_a:('a -> 'a -> bool) -> bool

    .. module:: Poly

      .. val:: contains
          type: 'a t -> 'a -> bool

    .. val:: prepend
        type: 'a -> 'a t -> 'a t

    .. val:: reverse
        type: 'a t -> 'a t

    .. val:: concat
        type: 'a t -> 'a t -> 'a t

    .. module:: Specialize

    .. module:: SpecializeEquatable

  .. module:: Array

    .. type:: t

    .. val:: get
        type: 'a t -> int -> 'a

  .. module:: Stream

    .. type:: t

    .. val:: empty
        type: 'a t

    .. val:: singleton
        type: 'a -> 'a t

    .. val:: to_list
        type: 'a t -> 'a list

    .. val:: of_list
        type: 'a list -> 'a t

    .. val:: prepend
        type: 'a -> 'a t -> 'a t

    .. val:: concat
        type: 'a t -> 'a t -> 'a t

    .. module:: ToList

  .. module:: IntRange

    .. type:: t

    .. val:: empty
        type: t

    .. val:: create
        type: ?start:int -> ?step:int -> int -> t

    .. val:: to_list
        type: t -> int list

    .. val:: to_array
        type: t -> int array

    .. module:: ToList

  .. module:: IntList

  .. module:: FloatList

  .. module:: StringList

    .. val:: concat
        type: ?sep:string -> t -> string

  .. module:: Format

    .. type:: t

    .. val:: with_result
        type: ('b, unit, string, string, string, 'a) t -> f:(string -> 'a) -> 'b

    .. val:: apply
        type: ('a, unit, string, string, string, string) t -> 'a

    .. val:: to_string
        type: ('a, 'b, 'c, 'd, 'e, 'f) t -> string

    .. val:: of_string
        type: ('a, 'b, 'c, 'd, 'e, 'f) t -> ('a, 'b, 'c, 'd, 'e, 'f) t

    .. val:: concat
        type: ('a, 'b, 'c, 'd, 'e, 'f) t -> ('f, 'b, 'c, 'e, 'g, 'h) t -> ('a, 'b, 'c, 'd, 'g, 'h) t

  .. module:: InChannel

    .. type:: t

  .. module:: InFile

    .. type:: t

    .. val:: with_file
        type: string -> f:(t -> 'a) -> 'a

    .. val:: with_channel
        type: string -> f:(InChannel.t -> 'a) -> 'a

    .. val:: channel
        type: t -> InChannel.t

    .. val:: seek
        type: t -> pos:int64 -> unit

    .. val:: pos
        type: t -> int64

    .. val:: size
        type: t -> int64

  .. module:: OutChannel

    .. type:: t

    .. val:: print
        type: t -> ('a, t, unit, unit, unit, unit) Format.t -> 'a

    .. val:: output
        type: t -> bytes -> unit

    .. val:: flush
        type: t -> unit

  .. module:: OutFile

    .. type:: t

    .. val:: with_file
        type: string -> f:(t -> 'a) -> 'a

    .. val:: with_channel
        type: string -> f:(OutChannel.t -> 'a) -> 'a

    .. val:: channel
        type: t -> OutChannel.t

    .. val:: seek
        type: t -> pos:int64 -> unit

    .. val:: pos
        type: t -> int64

    .. val:: size
        type: t -> int64

  .. module:: StdIn

    .. val:: channel
        type: InChannel.t

  .. module:: StdOut

    .. val:: channel
        type: OutChannel.t

    .. val:: print
        type: ('a, OutChannel.t, unit, unit, unit, unit) Format.t -> 'a

    .. val:: output
        type: bytes -> unit

    .. val:: flush
        type: unit -> unit

  .. module:: StdErr

    .. val:: channel
        type: OutChannel.t

    .. val:: print
        type: ('a, OutChannel.t, unit, unit, unit, unit) Format.t -> 'a

    .. val:: output
        type: bytes -> unit

    .. val:: flush
        type: unit -> unit

  .. module:: Testing

    .. module:: Result

      .. type:: t

    .. module:: Test

      .. type:: t

      .. val:: run
          type: ?record_backtrace:bool -> t -> Result.t

    .. val:: command_line_main
        type: argv:string list -> Test.t -> Exit.t

    .. val:: (>::)
        type: string -> Test.t list -> Test.t

    .. val:: (>:)
        type: string -> unit lazy_t -> Test.t

    .. val:: (~:)
        type: ('a, unit, string, string, string, unit lazy_t -> Test.t) CamlinternalFormatBasics.format6 -> 'a

    .. val:: (~::)
        type: ('a, unit, string, string, string, Test.t list -> Test.t) CamlinternalFormatBasics.format6 -> 'a

    .. val:: fail
        type: ('a, unit, string, string, string, 'b) CamlinternalFormatBasics.format6 -> 'a

    .. val:: expect_exception
        type: expected:exn -> 'a lazy_t -> unit

    .. val:: check
        type: repr:('a -> string) -> equal:('a -> 'a -> bool) -> expected:'a -> 'a -> unit

    .. val:: check_poly
        type: repr:('a -> string) -> expected:'a -> 'a -> unit

    .. val:: check_string
        type: expected:string -> string -> unit

    .. val:: check_bool
        type: expected:bool -> bool -> unit

    .. val:: check_true
        type: bool -> unit

    .. val:: check_false
        type: bool -> unit

    .. val:: check_int
        type: expected:int -> int -> unit

    .. val:: check_float_exact
        type: expected:float -> float -> unit

    .. val:: check_option
        type: repr:('a -> string) -> equal:('a -> 'a -> bool) -> expected:'a option -> 'a option -> unit

    .. val:: check_some
        type: repr:('a -> string) -> equal:('a -> 'a -> bool) -> expected:'a -> 'a option -> unit

    .. val:: check_none
        type: repr:('a -> string) -> equal:('a -> 'a -> bool) -> 'a option -> unit

    .. val:: check_int_option
        type: expected:int option -> int option -> unit

    .. val:: check_some_int
        type: expected:int -> int option -> unit

    .. val:: check_none_int
        type: int option -> unit

    .. val:: check_list
        type: repr:('a -> string) -> equal:('a -> 'a -> bool) -> expected:'a list -> 'a list -> unit

    .. val:: check_string_list
        type: expected:string list -> string list -> unit

    .. val:: check_int_list
        type: expected:int list -> int list -> unit

  .. module:: Standard

    .. module:: Testing

    .. module:: Array

    .. module:: BigInt

    .. module:: Bool

    .. module:: CallStack

    .. module:: Char

    .. module:: Exception

    .. module:: Exit

    .. module:: Float

    .. module:: Format

    .. module:: Function1

    .. module:: Function2

    .. module:: Function3

    .. module:: Function4

    .. module:: Function5

    .. module:: InChannel

    .. module:: InFile

    .. module:: Int32

    .. module:: Int64

    .. module:: Int

    .. module:: Lazy

    .. module:: List

    .. module:: NativeInt

    .. module:: Option

    .. module:: OutChannel

    .. module:: OutFile

    .. module:: Reference

    .. module:: StdErr

    .. module:: StdIn

    .. module:: StdOut

    .. module:: Stream

    .. module:: String

    .. module:: Tuple2

    .. module:: Tuple3

    .. module:: Tuple4

    .. module:: Tuple5

    .. module:: Unit

    .. module:: IntRange

    .. module:: IntOption

    .. module:: FloatOption

    .. module:: StringOption

    .. module:: IntReference

    .. module:: FloatReference

    .. module:: StringReference

    .. module:: IntList

    .. module:: FloatList

    .. module:: StringList

  .. module:: Abbr

    .. module:: Tst

    .. module:: Ar

    .. module:: BigInt

    .. module:: Bo

    .. module:: CallStack

    .. module:: Ch

    .. module:: Exit

    .. module:: Exn

    .. module:: Fl

    .. module:: Frmt

    .. module:: Fun1

    .. module:: Fun2

    .. module:: Fun3

    .. module:: Fun4

    .. module:: Fun5

    .. module:: InCh

    .. module:: InFile

    .. module:: Int32

    .. module:: Int64

    .. module:: Int

    .. module:: Laz

    .. module:: Li

    .. module:: NativeInt

    .. module:: Opt

    .. module:: OutCh

    .. module:: OutFile

    .. module:: Ref

    .. module:: StdErr

    .. module:: StdIn

    .. module:: StdOut

    .. module:: Str

    .. module:: Strm

    .. module:: Tu2

    .. module:: Tu3

    .. module:: Tu4

    .. module:: Tu5

    .. module:: Unit

    .. module:: IntRa

    .. module:: IntOpt

    .. module:: FlOpt

    .. module:: StrOpt

    .. module:: IntRef

    .. module:: FlRef

    .. module:: StrRef

    .. module:: IntLi

    .. module:: FlLi

    .. module:: StrLi

