module NativeInt: sig
  module O
  type t = nativeint
  val abs: nativeint -> nativeint
  val add: nativeint -> nativeint -> nativeint
  val between: nativeint -> low:nativeint -> high:nativeint -> bool
  val between_or_equal: nativeint -> low:nativeint -> high:nativeint -> bool
  val compare: nativeint -> nativeint -> General.Compare.t
  val different: nativeint -> nativeint -> bool
  val divide: nativeint -> nativeint -> nativeint
  val equal: nativeint -> nativeint -> bool
  val exponentiate: nativeint -> int -> nativeint
  val greater_or_equal: nativeint -> nativeint -> bool
  val greater_than: nativeint -> nativeint -> bool
  val greatest: nativeint
  val less_or_equal: nativeint -> nativeint -> bool
  val less_than: nativeint -> nativeint -> bool
  val max: nativeint -> nativeint -> nativeint
  val min: nativeint -> nativeint -> nativeint
  val min_max: nativeint -> nativeint -> nativeint * nativeint
  val modulo: nativeint -> nativeint -> nativeint
  val multiply: nativeint -> nativeint -> nativeint
  val negate: nativeint -> nativeint
  val of_float: float -> nativeint
  val of_int: int -> nativeint
  val of_string: string -> nativeint
  val one: nativeint
  val pred: nativeint -> nativeint
  val repr: nativeint -> string
  val smallest: nativeint
  val square: nativeint -> nativeint
  val subtract: nativeint -> nativeint -> nativeint
  val succ: nativeint -> nativeint
  val to_float: nativeint -> float
  val to_int: nativeint -> int
  val to_string: nativeint -> string
  val try_of_string: string -> nativeint option
  val zero: nativeint
end
