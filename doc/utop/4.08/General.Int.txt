module Int: sig
  module Bitwise
  module O
  type t = int
  val abs: int -> int
  val add: int -> int -> int
  val between: int -> low:int -> high:int -> bool
  val between_or_equal: int -> low:int -> high:int -> bool
  val compare: int -> int -> General.Compare.t
  val different: int -> int -> bool
  val divide: int -> int -> int
  val equal: int -> int -> bool
  val exponentiate: int -> int -> int
  val greater_or_equal: int -> int -> bool
  val greater_than: int -> int -> bool
  val greatest: int
  val less_or_equal: int -> int -> bool
  val less_than: int -> int -> bool
  val max: int -> int -> int
  val min: int -> int -> int
  val min_max: int -> int -> int * int
  val modulo: int -> int -> int
  val multiply: int -> int -> int
  val negate: int -> int
  val of_float: float -> int
  val of_int: int -> int
  val of_string: string -> int
  val one: int
  val pred: int -> int
  val repr: int -> string
  val smallest: int
  val square: int -> int
  val substract: int -> int -> int
  val succ: int -> int
  val to_float: int -> float
  val to_int: int -> int
  val to_string: int -> string
  val try_of_string: string -> int option
  val zero: int
end
