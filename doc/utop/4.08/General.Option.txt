module Option: sig
  module Specialize
  type 'a t = 'a option
  val between: 'a option -> low:'a option -> high:'a option -> compare_a:('a -> 'a -> General.Compare.t) -> bool
  val between_or_equal: 'a option -> low:'a option -> high:'a option -> compare_a:('a -> 'a -> General.Compare.t) -> bool
  val compare: 'a option -> 'a option -> compare_a:('a -> 'a -> General.Compare.t) -> General.Compare.t
  val different: 'a option -> 'a option -> equal_a:('a -> 'a -> bool) -> bool
  val equal: 'a option -> 'a option -> equal_a:('a -> 'a -> bool) -> bool
  val filter: 'a option -> f:('a -> bool) -> 'a option
  val filter_map: 'a option -> f:('a -> 'b option) -> 'b option
  val greater_or_equal: 'a option -> 'a option -> compare_a:('a -> 'a -> General.Compare.t) -> bool
  val greater_than: 'a option -> 'a option -> compare_a:('a -> 'a -> General.Compare.t) -> bool
  val is_none: 'a option -> bool
  val is_some: 'a option -> bool
  val iter: 'a option -> f:('a -> unit) -> unit
  val less_or_equal: 'a option -> 'a option -> compare_a:('a -> 'a -> General.Compare.t) -> bool
  val less_than: 'a option -> 'a option -> compare_a:('a -> 'a -> General.Compare.t) -> bool
  val map: 'a option -> f:('a -> 'b) -> 'b option
  val max: 'a option -> 'a option -> compare_a:('a -> 'a -> General.Compare.t) -> 'a option
  val min: 'a option -> 'a option -> compare_a:('a -> 'a -> General.Compare.t) -> 'a option
  val min_max: 'a option -> 'a option -> compare_a:('a -> 'a -> General.Compare.t) -> 'a option * 'a option
  val none: 'a option
  val or_failure: ('a, unit, string, string, string, 'b option -> 'b) format6 -> 'a
  val repr: 'a option -> repr_a:('a -> string) -> string
  val some: 'a -> 'a option
  val some_if: bool -> 'a lazy_t -> 'a option
  val some_if': bool -> 'a -> 'a option
  val value: ?exc:exn -> 'a option -> 'a
  val value_def: 'a option -> def:'a -> 'a
  val value_map: 'a option -> def:'b -> f:('a -> 'b) -> 'b
end
