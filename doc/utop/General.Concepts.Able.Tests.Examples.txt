module Examples: sig
  module type S0 = sig
    type t
    val different: (t * t) list
    val repr: (t * string) list
    val ordered: t list list
    val equal: t list list
  end
  module type Element = sig
    type t
    val compare: t -> t -> General.Compare.t
    val equal: t -> t -> bool
    val repr: t -> string
  end
  module type S1 = sig
    type 'a t
    module A: Element
    val different: (A.t t * A.t t) list
    val repr: (A.t t * string) list
    val ordered: A.t t list list
    val equal: A.t t list list
  end
  module type S2 = sig
    type ('a, 'b) t
    module A: Element
    module B: Element
    val different: ((A.t, B.t) t * (A.t, B.t) t) list
    val repr: ((A.t, B.t) t * string) list
    val ordered: (A.t, B.t) t list list
    val equal: (A.t, B.t) t list list
  end
  module type S3 = sig
    type ('a, 'b, 'c) t
    module A: Element
    module B: Element
    module C: Element
    val different: ((A.t, B.t, C.t) t * (A.t, B.t, C.t) t) list
    val repr: ((A.t, B.t, C.t) t * string) list
    val ordered: (A.t, B.t, C.t) t list list
    val equal: (A.t, B.t, C.t) t list list
  end
  module type S4 = sig
    type ('a, 'b, 'c, 'd) t
    module A: Element
    module B: Element
    module C: Element
    module D: Element
    val different: ((A.t, B.t, C.t, D.t) t * (A.t, B.t, C.t, D.t) t) list
    val repr: ((A.t, B.t, C.t, D.t) t * string) list
    val ordered: (A.t, B.t, C.t, D.t) t list list
    val equal: (A.t, B.t, C.t, D.t) t list list
  end
  module type S5 = sig
    type ('a, 'b, 'c, 'd, 'e) t
    module A: Element
    module B: Element
    module C: Element
    module D: Element
    module E: Element
    val different: ((A.t, B.t, C.t, D.t, E.t) t * (A.t, B.t, C.t, D.t, E.t) t) list
    val repr: ((A.t, B.t, C.t, D.t, E.t) t * string) list
    val ordered: (A.t, B.t, C.t, D.t, E.t) t list list
    val equal: (A.t, B.t, C.t, D.t, E.t) t list list
  end
end
