module Specialize3(M: General.Facets.Able.S3)(A: General.Facets.Able.S0)(B: General.Facets.Able.S0)(C: General.Facets.Able.S0): sig
  module O: sig
    val (<): t -> t -> bool
    val (<=): t -> t -> bool
    val (<>): t -> t -> bool
    val (=): t -> t -> bool
    val (>): t -> t -> bool
    val (>=): t -> t -> bool
  end
  type t = (A.t, B.t, C.t) M.t
  val between: t -> low:t -> high:t -> bool
  val between_or_equal: t -> low:t -> high:t -> bool
  val compare: t -> t -> General.Compare.t
  val different: t -> t -> bool
  val equal: t -> t -> bool
  val greater_or_equal: t -> t -> bool
  val greater_than: t -> t -> bool
  val less_or_equal: t -> t -> bool
  val less_than: t -> t -> bool
  val max: t -> t -> t
  val min: t -> t -> t
  val min_max: t -> t -> t * t
  val repr: t -> bytes
end
