module StringList: sig
  module O
  module ToList
  type t = bytes list
  val concat: t -> t -> t
  val contains: t -> bytes -> bool
  val count: t -> f:(bytes -> bool) -> int
  val count_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> 'acc * bool) -> int
  val count_i: t -> f:(i:int -> bytes -> bool) -> int
  val empty: t
  val filter: t -> f:(bytes -> bool) -> t
  val filter_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> 'acc * bool) -> t
  val filter_i: t -> f:(i:int -> bytes -> bool) -> t
  val filter_map: t -> f:(bytes -> bytes option) -> t
  val filter_map_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> 'acc * bytes option) -> t
  val filter_map_i: t -> f:(i:int -> bytes -> bytes option) -> t
  val find: t -> f:(bytes -> bool) -> bytes
  val find_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> 'acc * bool) -> bytes
  val find_i: t -> f:(i:int -> bytes -> bool) -> bytes
  val find_map: t -> f:(bytes -> 'b option) -> 'b
  val find_map_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> 'acc * 'b option) -> 'b
  val find_map_i: t -> f:(i:int -> bytes -> 'b option) -> 'b
  val flat_map: t -> f:(bytes -> t) -> t
  val flat_map_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> 'acc * t) -> t
  val flat_map_i: t -> f:(i:int -> bytes -> t) -> t
  val fold: init:'b -> t -> f:('b -> bytes -> 'b) -> 'b
  val fold_acc: acc:'acc -> init:'b -> t -> f:(acc:'acc -> 'b -> bytes -> 'acc * 'b) -> 'b
  val fold_i: init:'b -> t -> f:(i:int -> 'b -> bytes -> 'b) -> 'b
  val fold_short: init:'b -> t -> f:('b -> bytes -> General.Shorten.t * 'b) -> 'b
  val fold_short_acc: acc:'acc -> init:'b -> t -> f:(acc:'acc -> 'b -> bytes -> 'acc * General.Shorten.t * 'b) -> 'b
  val fold_short_i: init:'b -> t -> f:(i:int -> 'b -> bytes -> General.Shorten.t * 'b) -> 'b
  val for_all: t -> f:(bytes -> bool) -> bool
  val for_all_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> 'acc * bool) -> bool
  val for_all_i: t -> f:(i:int -> bytes -> bool) -> bool
  val head: t -> bytes
  val is_empty: t -> bool
  val iter: t -> f:(bytes -> unit) -> unit
  val iter_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> 'acc) -> unit
  val iter_i: t -> f:(i:int -> bytes -> unit) -> unit
  val iter_short: t -> f:(bytes -> General.Shorten.t) -> unit
  val iter_short_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> 'acc * General.Shorten.t) -> unit
  val iter_short_i: t -> f:(i:int -> bytes -> General.Shorten.t) -> unit
  val join: ?sep:bytes -> t -> bytes
  val map: t -> f:(bytes -> bytes) -> t
  val map_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> 'acc * bytes) -> t
  val map_i: t -> f:(i:int -> bytes -> bytes) -> t
  val of_array: bytes array -> t
  val of_list: bytes list -> t
  val prepend: bytes -> t -> t
  val reduce: t -> f:(bytes -> bytes -> bytes) -> bytes
  val reduce_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> bytes -> 'acc * bytes) -> bytes
  val reduce_i: t -> f:(i:int -> bytes -> bytes -> bytes) -> bytes
  val reduce_short: t -> f:(bytes -> bytes -> General.Shorten.t * bytes) -> bytes
  val reduce_short_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> bytes -> 'acc * General.Shorten.t * bytes) -> bytes
  val reduce_short_i: t -> f:(i:int -> bytes -> bytes -> General.Shorten.t * bytes) -> bytes
  val reverse: t -> t
  val scan: init:bytes -> t -> f:(bytes -> bytes -> bytes) -> t
  val scan_acc: acc:'acc -> init:bytes -> t -> f:(acc:'acc -> bytes -> bytes -> 'acc * bytes) -> t
  val scan_i: init:bytes -> t -> f:(i:int -> bytes -> bytes -> bytes) -> t
  val scan_short: init:bytes -> t -> f:(bytes -> bytes -> General.Shorten.t * bytes) -> t
  val scan_short_acc: acc:'acc -> init:bytes -> t -> f:(acc:'acc -> bytes -> bytes -> 'acc * General.Shorten.t * bytes) -> t
  val scan_short_i: init:bytes -> t -> f:(i:int -> bytes -> bytes -> General.Shorten.t * bytes) -> t
  val singleton: bytes -> t
  val size: t -> int
  val tail: t -> t
  val there_exists: t -> f:(bytes -> bool) -> bool
  val there_exists_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> 'acc * bool) -> bool
  val there_exists_i: t -> f:(i:int -> bytes -> bool) -> bool
  val to_array: t -> bytes array
  val to_list: t -> bytes list
  val try_find: t -> f:(bytes -> bool) -> bytes option
  val try_find_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> 'acc * bool) -> bytes option
  val try_find_i: t -> f:(i:int -> bytes -> bool) -> bytes option
  val try_find_map: t -> f:(bytes -> 'b option) -> 'b option
  val try_find_map_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> 'acc * 'b option) -> 'b option
  val try_find_map_i: t -> f:(i:int -> bytes -> 'b option) -> 'b option
  val try_head: t -> bytes option
  val try_reduce: t -> f:(bytes -> bytes -> bytes) -> bytes option
  val try_reduce_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> bytes -> 'acc * bytes) -> bytes option
  val try_reduce_i: t -> f:(i:int -> bytes -> bytes -> bytes) -> bytes option
  val try_reduce_short: t -> f:(bytes -> bytes -> General.Shorten.t * bytes) -> bytes option
  val try_reduce_short_acc: acc:'acc -> t -> f:(acc:'acc -> bytes -> bytes -> 'acc * General.Shorten.t * bytes) -> bytes option
  val try_reduce_short_i: t -> f:(i:int -> bytes -> bytes -> General.Shorten.t * bytes) -> bytes option
  val try_tail: t -> t option
end
