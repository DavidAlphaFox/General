module Make0(M: General.Concepts.Integer.Tests.Testable.S0)(E: sig
  val add_substract: (M.t * M.t * M.t) list
  val different: (M.t * M.t) list
  val divide: (M.t * M.t * M.t) list
  val equal: M.t list list
  val exponentiate: (M.t * int * M.t) list
  val multiply: (M.t * M.t * M.t) list
  val negate: (M.t * M.t) list
  val of_string: (bytes * M.t) list
  val ordered: M.t list list
  val repr: (M.t * bytes) list
  val succ: (M.t * M.t) list
  val to_string: (M.t * bytes) list
end): sig
  val test: General.Test.t
end
