module StringSortedMap: sig
  type 'a t = 'a General.StringSortedMap.t
  val add: 'a t -> k:bytes -> v:'a -> bool * 'a t
  val empty: 'a t
  val get: 'a t -> k:bytes -> 'a
  val is_empty: 'a t -> bool
  val of_list_first: (bytes * 'a) list -> 'a t
  val of_list_last: (bytes * 'a) list -> 'a t
  val of_list_reduce: (bytes * 'a) list -> f:(bytes -> 'a -> 'a -> 'a) -> 'a t
  val remove: 'a t -> k:bytes -> bool * 'a t
  val replace: 'a t -> k:bytes -> v:'a -> 'a t
  val singleton: k:bytes -> v:'a -> 'a t
  val size: 'a t -> int
  val to_list: 'a t -> (bytes * 'a) list
  val try_get: 'a t -> k:bytes -> 'a option
end
