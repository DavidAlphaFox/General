module Specialize(A: sig
  type t
end): sig
  type t = A.t option
  val filter: t -> f:(A.t -> bool) -> t
  val filter_map: t -> f:(A.t -> 'a option) -> 'a option
  val is_none: t -> bool
  val is_some: t -> bool
  val iter: t -> f:(A.t -> unit) -> unit
  val map: t -> f:(A.t -> 'a) -> 'a option
  val or_failure: ('a, unit, string, string, string, t -> A.t) format6 -> 'a
  val some_if: bool -> A.t lazy_t -> t
  val some_if': bool -> A.t -> t
  val value: ?exc:exn -> t -> A.t
  val value_def: t -> def:A.t -> A.t
  val value_map: t -> def:'a -> f:(A.t -> 'a) -> 'a
end
