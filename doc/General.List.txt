module List: sig
  type 'a t = 'a list
  val empty: 'a t
  val of_list: 'a t -> 'a t
  val to_list: 'a t -> 'a t
  val of_array: 'a array -> 'a t
  val to_array: 'a t -> 'a array
  val size: 'a t -> int
  val contains: 'a t -> 'a -> equal_a:('a -> 'a -> bool) -> bool
  val cons: 'a -> 'a t -> 'a t
  val head: 'a t -> 'a
  val tail: 'a t -> 'a t
  val try_head: 'a t -> 'a option
  val try_tail: 'a t -> 'a t option
  val reverse: 'a t -> 'a t
  val append: 'a t -> 'a t -> 'a t
  val map: 'a t -> f:('a -> 'b) -> 'b t
  val iter: 'a t -> f:('a -> unit) -> unit
  val fold: 'a t -> init:'b -> f:('b -> 'a -> 'b) -> 'b
  val try_reduce: 'a t -> f:('a -> 'a -> 'a) -> 'a option
  val reduce: 'a t -> f:('a -> 'a -> 'a) -> 'a
  val concat_map: 'a t -> f:('a -> 'b t) -> 'b t
  val filter: 'a t -> f:('a -> bool) -> 'a t
  val filter_map: 'a t -> f:('a -> 'b option) -> 'b t
  val iter_i: 'a t -> f:(int -> 'a -> unit) -> unit
  val fold_i: 'a t -> init:'b -> f:(int -> 'b -> 'a -> 'b) -> 'b
  module O
  module Poly
  module Specialize
  module SpecializeEquatable
end
