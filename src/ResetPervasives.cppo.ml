#if OCAML_VERSION >= (4, 2, 0)
  #define HAS_raise_notrace
#endif

(* To detect values not overriden, in ResetPervasives.inferred.mli *)
include Pervasives

#define PLEASE_USE(v, repl) \
  let _ = v \
  let v = `CONCAT(Please_use__General_, repl)

(* https://caml.inria.fr/pub/docs/manual-ocaml-4.02/libref/Pervasives.html *)

(* Exceptions *)
PLEASE_USE(raise, Exception_raise)
#ifdef HAS_raise_notrace
PLEASE_USE(raise_notrace, Exception_raise_notrace)
#endif
PLEASE_USE(invalid_arg, Exception_invalid_argument)
PLEASE_USE(failwith, Exception_failure)
(* exception Exit: please use Exception.Exit *)

(* Comparisons *)
PLEASE_USE((=), Equate_Poly_equal)
PLEASE_USE((<>), Compare_Poly_different)
PLEASE_USE((<), Compare_Poly_less_than)
PLEASE_USE((>), Compare_Poly_greater_than)
PLEASE_USE((<=), Compare_Poly_less_or_equal)
PLEASE_USE((>=), Compare_Poly_greater_or_equal)
PLEASE_USE(compare, Compare_Poly_compare)
PLEASE_USE(min, Compare_Poly_min)
PLEASE_USE(max, Compare_Poly_max)
PLEASE_USE((==), Compare_Physical_equal)
PLEASE_USE((!=), Compare_Physical_different)

(* Boolean operations *)
PLEASE_USE(not, Bool_not)
PLEASE_USE((&&), Bool_and)
let (&) = `Please_use__General_Bool_and
PLEASE_USE((||), Bool_or)
let (or) = `Please_use__General_Bool_or

(* Debugging *)
(* Nothing to override *)

(* Composition operators *)
PLEASE_USE((|>), Function_apply)
PLEASE_USE((@@), Function_apply)

(* Integer arithmetics *)
PLEASE_USE((~-), Int_negate)
PLEASE_USE((~+), Int_posate)
PLEASE_USE(succ, Int_succ)
PLEASE_USE(pred, Int_pred)
PLEASE_USE((+), Int_add)
PLEASE_USE((-), Int_substract)
PLEASE_USE(( * ), Int_multiply)
PLEASE_USE((/), Int_divide)
PLEASE_USE((mod), Int_modulo)
PLEASE_USE(abs, Int_abs)
PLEASE_USE(max_int, Int_greatest)
PLEASE_USE(min_int, Int_smallest)

(* Bitwise operations *)
PLEASE_USE((land), Int_Bitwise_logical_and)
PLEASE_USE((lor), Int_Bitwise_logical_or)
PLEASE_USE((lxor), Int_Bitwise_logical_xor)
PLEASE_USE((lnot), Int_Bitwise_logical_not)
PLEASE_USE((lsl), Int_Bitwise_logical_shift_left)
PLEASE_USE((lsr), Int_Bitwise_logical_shift_right)
PLEASE_USE((asr), Int_Bitwise_arithmetic_shift_right)

(* Floating-point arithmetic *)
PLEASE_USE((~-.), Float_negate)
PLEASE_USE((~+.), Float_posate)
PLEASE_USE((+.), Float_add)
PLEASE_USE((-.), Float_substract)
PLEASE_USE(( *. ), Float_multiply)
PLEASE_USE((/.), Float_divide)
PLEASE_USE(( ** ), Float_exponentiate)
PLEASE_USE(sqrt, Math_sqrt)
PLEASE_USE(exp, Math_exp)
PLEASE_USE(log, Math_log)
PLEASE_USE(log10, Math_log10)
PLEASE_USE(expm1, todo)
PLEASE_USE(log1p, todo)
PLEASE_USE(cos, todo)
PLEASE_USE(sin, todo)
PLEASE_USE(tan, todo)
PLEASE_USE(acos, todo)
PLEASE_USE(asin, todo)
PLEASE_USE(atan, todo)
PLEASE_USE(atan2, todo)
PLEASE_USE(hypot, todo)
PLEASE_USE(cosh, todo)
PLEASE_USE(sinh, todo)
PLEASE_USE(tanh, todo)
PLEASE_USE(ceil, todo)
PLEASE_USE(floor, todo)
PLEASE_USE(abs_float, Float_abs)
PLEASE_USE(copysign, todo)
PLEASE_USE(mod_float, Float_modulo)
PLEASE_USE(frexp, todo)
PLEASE_USE(ldexp, todo)
PLEASE_USE(modf, todo)
PLEASE_USE(float, Float_of_int)
PLEASE_USE(float_of_int, Float_of_int)
PLEASE_USE(truncate, Int_of_float)
PLEASE_USE(int_of_float, Int_of_float)
PLEASE_USE(infinity, todo)
PLEASE_USE(neg_infinity, todo)
PLEASE_USE(nan, todo)
PLEASE_USE(max_float, todo)
PLEASE_USE(min_float, todo)
PLEASE_USE(epsilon_float, todo)
PLEASE_USE(classify_float, Float_Class_of_float)

(* String operations *)
PLEASE_USE((^), String_concat)

(* Character operations *)
PLEASE_USE(int_of_char, Char_of_int)
PLEASE_USE(char_of_int, Char_to_int)

(* Unit operations *)
PLEASE_USE(ignore, Unit_ignore)

(* String conversion functions *)
PLEASE_USE(string_of_bool, Bool_to_string)
PLEASE_USE(bool_of_string, Bool_of_string)
PLEASE_USE(string_of_int, Int_to_string)
PLEASE_USE(int_of_string, Int_of_string)
PLEASE_USE(string_of_float, Float_of_string)
PLEASE_USE(float_of_string, Float_to_string)

(* Pair operations *)
PLEASE_USE(fst, Tuple2_get_0)
PLEASE_USE(snd, Tuple2_get_1)

(* List operations *)
PLEASE_USE((@), List_append)

(* Input/output *)
PLEASE_USE(stdin, todo)
PLEASE_USE(stdout, todo)
PLEASE_USE(stderr, todo)

(* Output functions on standard output *)
PLEASE_USE(print_char, todo)
PLEASE_USE(print_string, todo)
PLEASE_USE(print_bytes, todo)
PLEASE_USE(print_int, todo)
PLEASE_USE(print_float, todo)
PLEASE_USE(print_endline, todo)
PLEASE_USE(print_newline, todo)

(* Output functions on standard error *)
PLEASE_USE(prerr_char, todo)
PLEASE_USE(prerr_string, todo)
PLEASE_USE(prerr_bytes, todo)
PLEASE_USE(prerr_int, todo)
PLEASE_USE(prerr_float, todo)
PLEASE_USE(prerr_endline, todo)
PLEASE_USE(prerr_newline, todo)

(* Input functions on standard input *)
PLEASE_USE(read_line, todo)
PLEASE_USE(read_int, todo)
PLEASE_USE(read_float, todo)

(* General output functions *)
PLEASE_USE(open_out, todo)
PLEASE_USE(open_out_bin, todo)
PLEASE_USE(open_out_gen, todo)
PLEASE_USE(flush, todo)
PLEASE_USE(flush_all, todo)
PLEASE_USE(output_char, todo)
PLEASE_USE(output_string, todo)
PLEASE_USE(output_bytes, todo)
PLEASE_USE(output, todo)
PLEASE_USE(output_substring, todo)
PLEASE_USE(output_byte, todo)
PLEASE_USE(output_binary_int, todo)
PLEASE_USE(output_value, todo)
PLEASE_USE(seek_out, todo)
PLEASE_USE(pos_out, todo)
PLEASE_USE(out_channel_length, todo)
PLEASE_USE(close_out, todo)
PLEASE_USE(close_out_noerr, todo)
PLEASE_USE(set_binary_mode_out, todo)

(* General input functions *)
PLEASE_USE(open_in, todo)
PLEASE_USE(open_in_bin, todo)
PLEASE_USE(open_in_gen, todo)
PLEASE_USE(input_char, todo)
PLEASE_USE(input_line, todo)
PLEASE_USE(input, todo)
PLEASE_USE(really_input, todo)
PLEASE_USE(really_input_string, todo)
PLEASE_USE(input_byte, todo)
PLEASE_USE(input_binary_int, todo)
PLEASE_USE(input_value, todo)
PLEASE_USE(seek_in, todo)
PLEASE_USE(pos_in, todo)
PLEASE_USE(in_channel_length, todo)
PLEASE_USE(close_in, todo)
PLEASE_USE(close_in_noerr, todo)
PLEASE_USE(set_binary_mode_in, todo)

(* Operations on large files *)
(* @todo module LargeFile = struct end *)

(* References *)
PLEASE_USE(ref, Reference_of_contents)
PLEASE_USE((!), Reference_contents)
PLEASE_USE((:=), Reference_assign)
PLEASE_USE(incr, IntReference_increment)
PLEASE_USE(decr, IntReference_decrement)

(* Operations on format strings *)
PLEASE_USE(string_of_format, Format_to_string)
PLEASE_USE(format_of_string, Format_of_string)
PLEASE_USE((^^), Format_concat)

(* Program termination *)
PLEASE_USE(exit, todo)
PLEASE_USE(at_exit, todo)

(* The following is for system use only. Do not call directly. *)

let valid_float_lexem = `You_should_not_be_using_that
let unsafe_really_input = `You_should_not_be_using_that
let do_at_exit = `You_should_not_be_using_that
